@page "/Train"
@inject IWebHostEnvironment hostEnvironment;

<PageTitle>Index</PageTitle>

<div class="container-fluid">

<h1>Train models</h1>

<div class="form-group mt-4">
	<label>Naam:</label>
	<input placeholder="Naam" @oninput="e => TrainNameChanged(e)" class="form-control @(string.IsNullOrEmpty(trainNameError) ? "" : "is-invalid")"/>
	<div class="invalid-feedback">
		@trainNameError
    </div>
</div>

<div class="form-group mt-4">
	<label>Model:</label>
	<select @onchange="SelectModel" @attributes="ControlAttributes()" class="form-control">
		<option value="all">All</option>
		@foreach(var model in TrainService.ModelNames) {
			<option value="@model">@model</option>
		}
	</select>
</div>

<div class="form-group mt-4">
	<label>Train input:</label>
	<InputFile class="form-control" OnChange="@LoadInputFile" />
</div>

<div class="form-group mt-4">
	<label>Validation input:</label>
	<InputFile class="form-control" OnChange="@LoadValidationFile" />
</div>

<div class="row mt-4">
	@if(TrainService.IsTraining) {
		<div class="col-12 col-md-4 col-lg-4 col-xl-3">
			<div class="btn btn-danger d-block my-1" @onclick="Stop">Stop training model</div>
		</div>
	} else {
		<div class="col-12 col-md-4 col-lg-4 col-xl-3">
			<div class="btn btn-success d-block my-1" @onclick="Start">Start training</div>
		</div>
		
		@if(TrainService.OutputName	!= null) {
			@if(Path.Exists(Path.Combine(TrainService.OutputDirectory, TrainService.OutputName))) {
				<div class="col-12 col-md-4 col-lg-4 col-xl-3">
					<a href="/Result/@TrainService.OutputName" class="btn btn-primary d-block my-1" @onclick="Start">Result</a>
				</div>
			}
		}
	}
</div>

	<div class="form-group mt-4">
		<h4>Output:</h4>
		<code>
			@if(TrainService.Output != null) {
				const int MAX_LINES = 15;
				int i = TrainService.Output.Count > MAX_LINES ? TrainService.Output.Count - MAX_LINES : 0;
				@for(; i < TrainService.Output.Count; i++){
					<span>@TrainService.Output[i]<br/></span>
				}
			}
		</code>
	</div>

</div>